// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accounts {
  accountId Int @id @default(autoincrement())
  id String @unique @db.Char(16)
  password String @db.Char(16)
  name String @db.Char(4)
  rankScore Int @default(1000)

  roster roster[]
  lineup lineup[]
  cashLog cashLog[]
  pickupToken pickupToken[]
  pickupTokenLog pickupTokenLog[]

  home game[] @relation("home")
  away game[] @relation("away")
}

model roster {
  rosterId Int @id @default(autoincrement())
  accountId Int 
  playerId Int
  rank String @default("normal")

  lineup lineup?

  account accounts @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  player players @relation(fields: [playerId], references: [playerId], onDelete: Cascade)
}

model lineup {
  lineupId Int @id @default(autoincrement())
  accountId Int 
  rosterId Int @unique

  account accounts @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  roster roster @relation(fields: [rosterId], references: [rosterId], onDelete: Cascade)
}

model players {
  playerId Int @id @default(autoincrement())
  playerName String
  speed Int
  shootAccuracy Int
  shootPower Int
  defense Int
  stamina Int
  style String

  roster roster[]
}

model game {
  gameId Int @id @default(autoincrement())
  homeId Int
  awayId Int
  win Boolean
  homeScore Int
  awayScore Int

  home accounts @relation("home", fields: [homeId], references: [accountId], onDelete: Cascade)
  away accounts @relation("away",fields: [awayId], references: [accountId], onDelete: Cascade)
}

model cashLog {
  cashLogId Int @id @default(autoincrement())
  accountId Int
  totalCash Int
  purpose String
  cashChange Int
  createAt DateTime @default(now())

  account accounts @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
}

model pickupToken {
  pickupTokenId Int @id @default(autoincrement())
  accountId Int
  type String 
  createAt DateTime @default(now())

  account accounts @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
}

model pickupTokenLog {
  pickupTokenLogId Int @id @default(autoincrement())
  accountId Int
  type String 
  purpose String
  amount Int
  createAt DateTime @default(now())

  account accounts @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
}